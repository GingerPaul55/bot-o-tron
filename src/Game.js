const GameStateEvent = require("./events/GameState");

/**
 * Game subscribes to gameId events and handles them posting moves
 * generated by player object that must implement two methods:
 *
 * getNextMove(array of uciMoves) returns uciMove
 * getReply(chat event) returns chat message
 *
 */
class Game {

  /**
   * Initialise with interface to lichess.
   */
  constructor(api, name, player) {
    this.api = api;
    this.name = name;
    this.player = player;
    this.thinking = false;
  }

  start(gameId) {
    this.gameId = gameId;
    this.api.streamGame(gameId, (event) => this.handler(event));
  }

  handleChatLine(event) {
    if (event.username === this.name) {
      return;
    }

    const reply = this.player.getReply(event);
    if (reply) {
      this.api.chat(this.gameId, event.room, reply);
    }
  }

  handler(event) {
    switch (event.type) {
      case "chatLine":
        this.handleChatLine(event);
        break;
      case "gameFull":
        this.colour = this.playingAs(event);
        this.playNextMove(event.state);
        break;
      case "gameState":
        if (this.colour) {
          this.playNextMove(event);
        }
        break;
      default:
        console.log("Unhandled game event : " + JSON.stringify(event));
    }
  }

  async playNextMove(rawEvent) {
    if (this.thinking) {
      console.log('already thinking');
      return;
    }
    const event = new GameStateEvent(rawEvent.moves, rawEvent.wtime, rawEvent.btime, rawEvent.winc, rawEvent.binc);
    const moves = (event.moves === "") ? [] : event.moves.split(" ");
    if (!event.isTurn(this.colour)) {
      console.log(this.name + " as " + this.colour + " to move (that's them)");
      return;
    }
    console.log(this.name + " as " + this.colour + " to move (that's me)");
    this.thinking = true;
    const result = await this.player.getNextMove(event);
    this.thinking = false;
    if (!result || !result.bestmove) {
      this.api.chat(this.gameId, 'spectator', 'Oh no, something has gone wrong... :()');
      return;
    }
    this.api.makeMove(this.gameId, result.bestmove);
  }

  playingAs(event) {
    return (event.white.name === this.name) ? "white" : "black";
  }
}

module.exports = Game;
